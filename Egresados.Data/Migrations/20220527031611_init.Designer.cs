// <auto-generated />
using System;
using Egresados.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Egresados.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220527031611_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Egresados.Model.Entities.BolsaTrabajo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Empresa")
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Perfil")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("VacanteNombre")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("BolsaTrabajo");
                });

            modelBuilder.Entity("Egresados.Model.Entities.CentroEducativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("CentroEducativo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "CRA",
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 606, DateTimeKind.Local).AddTicks(1406),
                            Nombre = "Centro Regional de Azuero"
                        });
                });

            modelBuilder.Entity("Egresados.Model.Entities.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("FacultadId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEvento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HoraEvento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LugarEventoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Sala")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("FacultadId");

                    b.HasIndex("LugarEventoId");

                    b.ToTable("Evento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Costo = 10.4m,
                            Descripcion = "evento de prueba",
                            FacultadId = 1,
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(5997),
                            FechaEvento = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(6514),
                            HoraEvento = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(5383),
                            LugarEventoId = 1,
                            Nombre = "Evento 1",
                            Sala = "1"
                        },
                        new
                        {
                            Id = 2,
                            Costo = 10.4m,
                            Descripcion = "evento de prueba",
                            FacultadId = 1,
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(7655),
                            FechaEvento = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(7656),
                            HoraEvento = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(7648),
                            LugarEventoId = 1,
                            Nombre = "Evento 2",
                            Sala = "2"
                        });
                });

            modelBuilder.Entity("Egresados.Model.Entities.Facultad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CentroEducativoId")
                        .HasColumnType("int");

                    b.Property<int?>("CentroId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PerfilId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CentroEducativoId");

                    b.HasIndex("PerfilId");

                    b.ToTable("Facultad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CentroId = 1,
                            Codigo = "FISC",
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(9199),
                            Nombre = "Sistemas"
                        },
                        new
                        {
                            Id = 2,
                            CentroId = 1,
                            Codigo = "FIC",
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(9905),
                            Nombre = "Civil"
                        });
                });

            modelBuilder.Entity("Egresados.Model.Entities.LugarEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("LugarEvento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "HTAzuero",
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(2198),
                            Nombre = "Hotel Azuero"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "CRA",
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 605, DateTimeKind.Local).AddTicks(2598),
                            Nombre = "UTP Azuero"
                        });
                });

            modelBuilder.Entity("Egresados.Model.Entities.Perfil", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Empresa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FacultadId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Egresados.Model.Entities.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PerfilId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.ToTable("Provincia");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "06",
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 602, DateTimeKind.Local).AddTicks(2907),
                            Nombre = "Herrera"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "07",
                            FechaAlta = new DateTime(2022, 5, 26, 22, 16, 10, 604, DateTimeKind.Local).AddTicks(896),
                            Nombre = "Los Santos"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Egresados.Model.Entities.Rol", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator().HasValue("Rol");
                });

            modelBuilder.Entity("Egresados.Model.Entities.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PerfilId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PerfilId");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator().HasValue("Usuario");
                });

            modelBuilder.Entity("Egresados.Model.Entities.Evento", b =>
                {
                    b.HasOne("Egresados.Model.Entities.Facultad", "Facultad")
                        .WithMany()
                        .HasForeignKey("FacultadId");

                    b.HasOne("Egresados.Model.Entities.LugarEvento", "LugarEvento")
                        .WithMany()
                        .HasForeignKey("LugarEventoId");

                    b.Navigation("Facultad");

                    b.Navigation("LugarEvento");
                });

            modelBuilder.Entity("Egresados.Model.Entities.Facultad", b =>
                {
                    b.HasOne("Egresados.Model.Entities.CentroEducativo", "CentroEducativo")
                        .WithMany()
                        .HasForeignKey("CentroEducativoId");

                    b.HasOne("Egresados.Model.Entities.Perfil", "Perfil")
                        .WithMany("Facultad")
                        .HasForeignKey("PerfilId");

                    b.Navigation("CentroEducativo");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Egresados.Model.Entities.Provincia", b =>
                {
                    b.HasOne("Egresados.Model.Entities.Perfil", "Perfil")
                        .WithMany("Provincia")
                        .HasForeignKey("PerfilId");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Egresados.Model.Entities.Usuario", b =>
                {
                    b.HasOne("Egresados.Model.Entities.Perfil", "Perfil")
                        .WithMany("Usuario")
                        .HasForeignKey("PerfilId");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Egresados.Model.Entities.Perfil", b =>
                {
                    b.Navigation("Facultad");

                    b.Navigation("Provincia");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
